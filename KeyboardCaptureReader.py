#!/usr/bin/env python3
# -*- coding: utf-8 -*-

###################
#    This file implements a Keyboard Capture Reader (to read file generated by NimKeylogger)
#    Copyright (C) 2024  Maurice Lambert

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
###################

import struct

class KeyEntry:
    def __init__(self, pressed, state_seconds, virtual_key_code):
        self.pressed = pressed
        self.state_seconds = state_seconds
        self.virtual_key_code = virtual_key_code

    def __repr__(self):
        return f"KeyEntry(pressed={self.pressed}, state_seconds={self.state_seconds}, virtual_key_code={self.virtual_key_code})"

class KeyLog:
    def __init__(self, magic_bytes, timestamp, keyboard_layout_code, number_of_entries, entries):
        self.magic_bytes = magic_bytes
        self.timestamp = timestamp
        self.keyboard_layout_code = keyboard_layout_code
        self.number_of_entries = number_of_entries
        self.entries = entries

    def __repr__(self):
        return (f"KeyLog(magic_bytes={self.magic_bytes}, timestamp={self.timestamp}, "
                f"keyboard_layout_code={self.keyboard_layout_code}, "
                f"number_of_entries={self.number_of_entries}, entries={self.entries})")

def read_keylog(file_path):
    with open(file_path, 'rb') as f:
        magic_bytes, timestamp, keyboard_layout_code, number_of_entries = struct.unpack('4sIII', f.read(16))

        entries = []
        for _ in range(number_of_entries):
            state_seconds, virtual_key_code = struct.unpack('IB', f.read(5))
            pressed = not bool(state_seconds & 0x80000000)
            entry = KeyEntry(pressed, state_seconds & 0x7fffffff, virtual_key_code)
            entries.append(entry)

        keylog = KeyLog(magic_bytes, timestamp, keyboard_layout_code, number_of_entries, entries)
        return keylog

if __name__ == "__main__":
    file_path = 'KeyboardCature.keyc'
    keylog = read_keylog(file_path)
    print(keylog)
